name: Fetch Token for Each Env

on:
  push:
    branches:
      - test

# on:
#   workflow_dispatch:
#   schedule:
#     - cron: '*/5 * * * *'  # or use workflow_dispatch to test manually
  
jobs:
  fetch_token:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev]  # List all environments here

    environment: ${{ matrix.environment }}
    
    env:
      TOKEN_SECRETS_JSON: ${{ secrets.TOKEN_SECRETS_JSON }}
      PROJECT_NAME: test-project-ef-internal-05
      NAMESPACE_NAME: test-namespace-ef-internal-05
      flag_1: false
      flag_2: false
      PROCEED_TO_TOPIC: false
      

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch token from ${{ matrix.environment }}
        shell: bash
        run: |
          echo "Processing environment: ${{ matrix.environment }}"

          CLIENT_ID=$(echo "$TOKEN_SECRETS_JSON" | jq -r '.CLINET_ID')
          CLIENT_SECRET=$(echo "$TOKEN_SECRETS_JSON" | jq -r '.CLIENT_SECRET')
          SCOPE=$(echo "$TOKEN_SECRETS_JSON" | jq -r '.SCOPE')
          TOKEN_URL=$(echo "$TOKEN_SECRETS_JSON" | jq -r '.TOKEN_URL')
          EFS_HOST=$(echo "$TOKEN_SECRETS_JSON" | jq -r '.EFS_HOST')
          echo "EFS_HOST=$EFS_HOST" >> $GITHUB_ENV

          echo "Calling token endpoint..."

          RESPONSE=$(curl -s -X POST "$TOKEN_URL" \
            -H 'Content-Type: application/x-www-form-urlencoded' \
            -d "grant_type=client_credentials" \
            -d "client_id=$CLIENT_ID" \
            -d "client_secret=$CLIENT_SECRET" \
            -d "scope=$SCOPE")

          echo "Response:"
          echo "$RESPONSE"

          TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')
          echo "ACCESS_TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Get project
        id: get_project
        shell: bash
        run: |
          PROJECT_URL="$EFS_HOST/eventservice/controller/v1/projects/$PROJECT_NAME"
          
          echo "Checking if project exists..."

          STATUS_CODE=$(curl -s -o response.json -w "%{http_code}" -X GET "$PROJECT_URL" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Accept: application/json")

          echo "Get project returned status: $STATUS_CODE"
          echo "status=$STATUS_CODE" >> $GITHUB_OUTPUT

          if [ $STATUS_CODE=='200' ]; then
            echo "flag_1=true" >> $GITHUB_OUTPUT
          fi

      - name: Create project if not found
        id: create_project
        if: $flag_1 == flase
        shell: bash
        run: |
          echo "Project not found. Creating..."

          PROJECT_URL="$EFS_HOST/eventservice/controller/v1/projects"
          STATUS_CODE=$(curl -s -o response.json -w "%{http_code}" -X POST "$PROJECT_URL" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d @src/main/resources/dev/project.json)

          echo "Create project returned status: $STATUS_CODE"
          echo "status=$STATUS_CODE" >> $GITHUB_OUTPUT

          if [ $STATUS_CODE=='201' ]; then
            echo "flag_1=true" >> $GITHUB_OUTPUT
          fi

      - name: Get Namespace
        id: get_namespace
        if: $flag_1 == true
        shell: bash
        run: |
          PROJECT_URL="$EFS_HOST/eventservice/controller/v1/projects/$PROJECT_NAME/namespaces/$NAMESPACE_NAME"
          
          echo "Checking if namespace exists..."

          STATUS_CODE=$(curl -s -o response.json -w "%{http_code}" -X GET "$PROJECT_URL" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Accept: application/json")

          echo "Get namespace returned status: $STATUS_CODE"
          echo "status=$STATUS_CODE" >> $GITHUB_OUTPUT

          if [ $STATUS_CODE=='200' ]; then
            echo "flag_2=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Namespace if not found
        id: create_namespace
        if: $flag_1 == true && $flag_2 == false
        shell: bash
        run: |
          echo "Namespace not found. Creating..."

          PROJECT_URL="$EFS_HOST/eventservice/controller/v1/projects/$PROJECT_NAME/namespaces"
          STATUS_CODE=$(curl -s -o response.json -w "%{http_code}" -X POST "$PROJECT_URL" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d @src/main/resources/dev/namespace.json)

          echo "Create namespace returned status: $STATUS_CODE"
          echo "status=$STATUS_CODE" >> $GITHUB_OUTPUT

          if [ $STATUS_CODE=='201' ]; then
            echo "flag_2=true" >> $GITHUB_OUTPUT
          fi



